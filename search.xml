<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>测试</title>
      <link href="/2018/03/30/%E4%BB%85%E9%99%90%E6%9C%AC%E5%9C%B0MD/%E6%B5%8B%E8%AF%95/"/>
      <content type="html"><![CDATA[<p>回顾过去 展未来</p>]]></content>
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018年个人总体规划</title>
      <link href="/2018/03/30/%E4%BB%85%E9%99%90%E6%9C%AC%E5%9C%B0MD/%E4%B8%AA%E4%BA%BA%E8%A7%84%E5%88%92/2018%E4%B8%AA%E4%BA%BA%E6%80%BB%E4%BD%93%E8%A7%84%E5%88%92/"/>
      <content type="html"><![CDATA[<p>回顾过去</p>]]></content>
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IntelliJ IDEA 快捷键</title>
      <link href="/2018/03/26/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <content type="html"><![CDATA[<h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件进行文本查找 <code>（必备）</code></td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换 <code>（必备）</code></td></tr><tr><td>Ctrl + Z</td><td>撤销 <code>（必备）</code></td></tr><tr><td>Ctrl + Y</td><td>删除光标所在行 或 删除选中的行 <code>（必备）</code></td></tr><tr><td>Ctrl + X</td><td>剪切光标所在行 或 剪切选择内容</td></tr><tr><td>Ctrl + C</td><td>复制光标所在行 或 复制选择内容</td></tr><tr><td>Ctrl + D</td><td>复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td></tr><tr><td>Ctrl + W</td><td>递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td></tr><tr><td>Ctrl + E</td><td>显示最近打开的文件记录列表 <code>（必备）</code></td></tr><tr><td>Ctrl + N</td><td>根据输入的 <strong>类名</strong> 查找类文件 <code>（必备）</code></td></tr><tr><td>Ctrl + G</td><td>在当前文件跳转到指定行处</td></tr><tr><td>Ctrl + J</td><td>插入自定义动态代码模板 <code>（必备）</code></td></tr><tr><td>Ctrl + P</td><td>方法参数提示显示 <code>（必备）</code></td></tr><tr><td>Ctrl + Q</td><td>光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td>Ctrl + U</td><td>前往当前光标所在的方法的父类的方法 / 接口定义 <code>（必备）</code></td></tr><tr><td>Ctrl + B</td><td>进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code> <code>（必备）</code></td></tr><tr><td>Ctrl + K</td><td>版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td>Ctrl + T</td><td>版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td>Ctrl + H</td><td>显示当前类的层次结构</td></tr><tr><td>Ctrl + O</td><td>选择可重写的方法</td></tr><tr><td>Ctrl + I</td><td>选择可继承的方法</td></tr><tr><td>Ctrl + +</td><td>展开代码</td></tr><tr><td>Ctrl + -</td><td>折叠代码</td></tr><tr><td>Ctrl + /</td><td>注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td></tr><tr><td>Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td>Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td>Ctrl + F1</td><td>在光标所在的错误代码处显示错误信息 <code>（必备）</code></td></tr><tr><td>Ctrl + F3</td><td>调转到所选中的词的下一个引用位置 <code>（必备）</code></td></tr><tr><td>Ctrl + F4</td><td>关闭当前编辑文件</td></tr><tr><td>Ctrl + F8</td><td>在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td>Ctrl + F9</td><td>执行 Make Project 操作</td></tr><tr><td>Ctrl + F11</td><td>选中文件 / 文件夹，使用助记符设定 / 取消书签 <code>（必备）</code></td></tr><tr><td>Ctrl + F12</td><td>弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td>Ctrl + Tab</td><td>编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td>Ctrl + End</td><td>跳到文件尾</td></tr><tr><td>Ctrl + Home</td><td>跳到文件头</td></tr><tr><td>Ctrl + Space</td><td>基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td></tr><tr><td>Ctrl + Delete</td><td>删除光标后面的单词或是中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + BackSpace</td><td>删除光标前面的单词或是中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + 1,2,3…9</td><td>定位到对应数值的书签位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 左键单击</td><td>在打开的文件标题上，弹出该文件路径 <code>（必备）</code></td></tr><tr><td>Ctrl + 光标定位</td><td>按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td>Ctrl + 左方向键</td><td>光标跳转到当前单词 / 中文句的左侧开头位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 右方向键</td><td>光标跳转到当前单词 / 中文句的右侧开头位置 <code>（必备）</code></td></tr><tr><td>Ctrl + 前方向键</td><td>等效于鼠标滚轮向前效果 <code>（必备）</code></td></tr><tr><td>Ctrl + 后方向键</td><td>等效于鼠标滚轮向后效果 <code>（必备）</code></td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt + `</td><td>显示版本控制常用操作菜单弹出层 <code>（必备）</code></td><td></td></tr><tr><td>Alt + Q</td><td>弹出一个提示，显示当前类的声明 / 上下文信息</td></tr><tr><td>Alt + F1</td><td>显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 <code>（必备）</code></td></tr><tr><td>Alt + F2</td><td>对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td>Alt + F3</td><td>选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td>Alt + F7</td><td>查找光标所在的方法 / 变量 / 类被调用的地方</td></tr><tr><td>Alt + F8</td><td>在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td>Alt + Home</td><td>定位 / 显示到当前文件的 <code>Navigation Bar</code></td></tr><tr><td>Alt + Enter</td><td>IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td></tr><tr><td>Alt + Insert</td><td>代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等 <code>（必备）</code></td></tr><tr><td>Alt + 左方向键</td><td>切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td></tr><tr><td>Alt + 右方向键</td><td>按切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换 <code>（必备）</code></td></tr><tr><td>Alt + 前方向键</td><td>当前光标跳转到当前文件的前一个方法名位置 <code>（必备）</code></td></tr><tr><td>Alt + 后方向键</td><td>当前光标跳转到当前文件的后一个方法名位置 <code>（必备）</code></td></tr><tr><td>Alt + 1,2,3…9</td><td>显示对应数值的选项卡，其中 1 是 Project 用得最多 <code>（必备）</code></td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Shift + F1</td><td>如果有外部文档可以连接外部文档</td></tr><tr><td>Shift + F2</td><td>跳转到上一个高亮错误 或 警告位置</td></tr><tr><td>Shift + F3</td><td>在查找模式下，查找匹配上一个</td></tr><tr><td>Shift + F4</td><td>对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td>Shift + F6</td><td>对文件 / 文件夹 重命名</td></tr><tr><td>Shift + F7</td><td>在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td>Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td></tr><tr><td>Shift + F9</td><td>等效于点击工具栏的 <code>Debug</code> 按钮</td></tr><tr><td>Shift + F10</td><td>等效于点击工具栏的 <code>Run</code> 按钮</td></tr><tr><td>Shift + F11</td><td>弹出书签显示层 <code>（必备）</code></td></tr><tr><td>Shift + Tab</td><td>取消缩进 <code>（必备）</code></td></tr><tr><td>Shift + ESC</td><td>隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td>Shift + End</td><td>选中光标到当前行尾位置</td></tr><tr><td>Shift + Home</td><td>选中光标到当前行头位置</td></tr><tr><td>Shift + Enter</td><td>开始新一行。光标所在行下空出一行，光标定位到新行位置 <code>（必备）</code></td></tr><tr><td>Shift + 左键单击</td><td>在打开的文件名上按此快捷键，可以关闭当前打开文件 <code>（必备）</code></td></tr><tr><td>Shift + 滚轮前后滚动</td><td>当前文件的横向滚动轴滚动 <code>（必备）</code></td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Alt + L</td><td>格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + O</td><td>优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + I</td><td>光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td>Ctrl + Alt + T</td><td>对选中的代码弹出环绕选项弹出层 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + J</td><td>弹出模板选择窗口，将选定的代码加入动态模板中</td></tr><tr><td>Ctrl + Alt + H</td><td>调用层次</td></tr><tr><td>Ctrl + Alt + B</td><td>在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td>Ctrl + Alt + C</td><td>重构-快速提取常量</td></tr><tr><td>Ctrl + Alt + F</td><td>重构-快速提取成员变量</td></tr><tr><td>Ctrl + Alt + V</td><td>重构-快速提取变量</td></tr><tr><td>Ctrl + Alt + Y</td><td>同步、刷新</td></tr><tr><td>Ctrl + Alt + S</td><td>打开 IntelliJ IDEA 系统设置 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + F7</td><td>显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td>Ctrl + Alt + F11</td><td>切换全屏模式</td></tr><tr><td>Ctrl + Alt + Enter</td><td>光标所在行上空出一行，光标定位到新行 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + Home</td><td>弹出跟当前文件有关联的文件弹出层</td></tr><tr><td>Ctrl + Alt + Space</td><td>类名自动完成</td></tr><tr><td>Ctrl + Alt + 左方向键</td><td>退回到上一个操作的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + 右方向键</td><td>前进到上一个操作的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Alt + 前方向键</td><td>在查找模式下，跳到上个查找的文件</td></tr><tr><td>Ctrl + Alt + 后方向键</td><td>在查找模式下，跳到下个查找的文件</td></tr><tr><td>Ctrl + Alt + 右括号（]）</td><td>在打开多个项目的情况下，切换下一个项目窗口</td></tr><tr><td>Ctrl + Alt + 左括号（[）</td><td>在打开多个项目的情况下，切换上一个项目窗口</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + F</td><td>根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + R</td><td>根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + J</td><td>自动将下一行合并到当前行末尾 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + W</td><td>递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + N</td><td>通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + U</td><td>对选中的代码进行大 / 小写轮流转换 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + T</td><td>对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + C</td><td>复制当前文件磁盘路径到剪贴板 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + V</td><td>弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td>Ctrl + Shift + E</td><td>显示最近修改的文件列表的弹出层</td></tr><tr><td>Ctrl + Shift + H</td><td>显示方法层次结构</td></tr><tr><td>Ctrl + Shift + B</td><td>跳转到类型声明处 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + I</td><td>快速查看光标所在的方法 或 类的定义</td></tr><tr><td>Ctrl + Shift + A</td><td>查找动作 / 设置</td></tr><tr><td>Ctrl + Shift + /</td><td>代码块注释 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + [</td><td>选中从光标所在位置到它的顶部中括号位置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + ]</td><td>选中从光标所在位置到它的底部中括号位置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + +</td><td>展开所有代码 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + -</td><td>折叠所有代码 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按Esc高亮消失 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + F8</td><td>在 Debug 模式下，指定断点进入条件</td></tr><tr><td>Ctrl + Shift + F9</td><td>编译选中的文件 / 包 / Module</td></tr><tr><td>Ctrl + Shift + F12</td><td>编辑器最大化 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Space</td><td>智能代码提示</td></tr><tr><td>Ctrl + Shift + Enter</td><td>自动结束代码，行末自动添加分号 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Backspace</td><td>退回到上次修改的地方 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 1,2,3…9</td><td>快速添加指定数值的书签 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 左键单击</td><td>把光标放在某个类变量上，按此快捷键可以直接定位到该类中 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 左方向键</td><td>在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 右方向键</td><td>在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 前方向键</td><td>光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + 后方向键</td><td>光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 <code>（必备）</code></td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt + Shift + N</td><td>选择 / 添加 task <code>（必备）</code></td></tr><tr><td>Alt + Shift + F</td><td>显示添加到收藏夹弹出层 / 添加到收藏夹</td></tr><tr><td>Alt + Shift + C</td><td>查看最近操作项目的变化情况列表</td></tr><tr><td>Alt + Shift + I</td><td>查看项目当前文件</td></tr><tr><td>Alt + Shift + F7</td><td>在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td>Alt + Shift + F9</td><td>弹出 <code>Debug</code> 的可选择菜单</td></tr><tr><td>Alt + Shift + F10</td><td>弹出 <code>Run</code> 的可选择菜单</td></tr><tr><td>Alt + Shift + 左键双击</td><td>选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 <code>（必备）</code></td></tr><tr><td>Alt + Shift + 前方向键</td><td>移动光标所在行向上移动 <code>（必备）</code></td></tr><tr><td>Alt + Shift + 后方向键</td><td>移动光标所在行向下移动 <code>（必备）</code></td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + Shift + Alt + V</td><td>无格式黏贴 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>前往指定的变量 / 方法</td></tr><tr><td>Ctrl + Shift + Alt + S</td><td>打开当前项目设置 <code>（必备）</code></td></tr><tr><td>Ctrl + Shift + Alt + C</td><td>复制参考信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F2</td><td>跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td></tr><tr><td>F3</td><td>在查找模式下，定位到下一个匹配处</td></tr><tr><td>F4</td><td>编辑源 <code>（必备）</code></td></tr><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>F11</td><td>添加书签 <code>（必备）</code></td></tr><tr><td>F12</td><td>回到前一个工具窗口 <code>（必备）</code></td></tr><tr><td>Tab</td><td>缩进 <code>（必备）</code></td></tr><tr><td>ESC</td><td>从工具窗口进入代码文件窗口 <code>（必备）</code></td></tr><tr><td>连按两次Shift</td><td>弹出 <code>Search Everywhere</code> 弹出层</td></tr></tbody></table><h2 id="官网快捷键资料"><a href="#官网快捷键资料" class="headerlink" title="官网快捷键资料"></a>官网快捷键资料</h2><h2 id="官网快捷键资料-1"><a href="#官网快捷键资料-1" class="headerlink" title="官网快捷键资料"></a>官网快捷键资料</h2><blockquote><ul><li>Windows / Linux：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="noopener">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf</a></li><li>Mac OS X：<a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf" target="_blank" rel="noopener">https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf</a></li></ul></blockquote><h2 id="第三方快捷键资料"><a href="#第三方快捷键资料" class="headerlink" title="第三方快捷键资料"></a>第三方快捷键资料</h2><blockquote><ul><li>来自 eta02913：<a href="http://xinyuwu.iteye.com/blog/1005454" target="_blank" rel="noopener">http://xinyuwu.iteye.com/blog/1005454</a></li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> short cut </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客搭建历程</title>
      <link href="/2018/03/19/hexo/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p>​    由于一次偶然机会接触到markdown，很喜欢其简洁高效的写作方式，所以决定用markdown来记录他们。初步决定用<code>简书</code>，但是经过一番注册之后发现其不够自由和随性，于是决定搭建个人博客。经过多方收集和打听消息，最终决定使用当前流行的 GitHub Pages 和 Hexo搭建。下面就个人搭建过程做个记录，以作备忘、以作分享。</p><h2 id="安装GitHub"><a href="#安装GitHub" class="headerlink" title="安装GitHub"></a>安装GitHub</h2><p>​    首先下载安装<a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHub客户端</a>，后续过程需要该命令工具来执行安装组件的命令。 同时在GitHub上创建用户发布博客的项目，项目命名格式为<code>youName.github.io</code>，这样博客搭建成功以后GitHub给我们搭建的博客分配的默认域名就和该项目一致。</p><h2 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h2><p>   前提：</p><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p><p>​    如果上述成功安装，通过Git Bash 客户端执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>​    安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>​    新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><ul><li><p><strong>_config.yml</strong> 文件是网站的配置文件，可以在其中配置网站的大部分参数。</p></li><li><p><strong>package.json</strong> 文件是应用程序的信息。</p></li><li><p><strong>source</strong> 是资源文件夹，是用来存放用户资源的地方。</p></li><li><p><strong>themes</strong> 是<a href="https://hexo.io/themes" target="_blank" rel="noopener">主题</a>文件夹，Hexo会根据主题来生成不同的静态页面。</p></li><li><p><strong>scaffolds</strong>是模板件夹，当新建文章的时候，Hexo会根据模板来建立文件。</p><p>到此本地博客已经安装好了，现在你可以运行命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p> 再访问：localhost:4000 本地试调</p></li></ul><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>​    首先你可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes</a>里找一个自己喜欢的主题，然后点击对应的主题进入主题的github项目，一般都有主题制作者编写的详细的安装配置文档，按文档操作就行。</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>​    打开Hexo主文件夹下的<strong>_config.yml</strong>，设置其中的<code>deploy</code> 参数，详细请查看Hexo官方文档中<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">部署部分</a>。</p><p>我的设置如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: git@github.com:aeonevil/aeonevil.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>​    git地址建议使用SSH地址。在上面的参数设置好了之后，使用下面的命令安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener"> hexo-deployer-git </a>插件，只有安装了插件之后才可以部署到GitHub Pages。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装完成后用下面的命令进行部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g #生成静态文件</span><br><span class="line">$ hexo d #部署到github</span><br></pre></td></tr></table></figure><p>还有一个更快捷的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g #在部署前先生成</span><br></pre></td></tr></table></figure><h2 id="同步博客"><a href="#同步博客" class="headerlink" title="同步博客"></a>同步博客</h2><p>​    如果你希望在家里编辑发布博客，到了公司也同样，建议把你本地的博客文件上传到GitHub上，在需要的电脑上clone 下来。</p><p><strong>上传</strong></p><p>​    进入博客本地博客文件根目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init </span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:youGitName/youBlogResourceProject.git</span><br><span class="line"></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><strong>克隆</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:youGitName/youBlogResourceProject.git</span><br></pre></td></tr></table></figure><p>再安装node.js，安装完成后，在克隆下来的项目根目录执行 <code>$ hexo s</code> 发现会报<code>ERROR Try running: &#39;npm install hexo --save&#39;</code>，排查之后发现因为node_modules文件没提交到git，在.gitignore文件里忽略了。此时在执行一次命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf node_modules/ &amp;&amp; npm install</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>即可解决问题。如果把.gitignore文件的<code>/node_modules</code>手动去掉，push 再 pull下来之后会发现启动仍然报db.json文件找不到的问题，db.json文件在.gitignore文件里也是忽略的，所以你提交的时候没提交上去，git里忽略的文件还多，所以不建议此种做法。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL事物</title>
      <link href="/2018/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/MYSQL%E4%BA%8B%E7%89%A9/"/>
      <content type="html"><![CDATA[<p>MySql事物属性<br><a id="more"></a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_transaction" target="_blank" rel="noopener">MySQL官方说明</a></p><p>事务是可以提交或回滚的原子工作单元。 当事务对数据库进行多次更改时，在提交事务时所有更改都将成功，或者当事务回滚时所有更改都将被撤销。</p><p>由InnoDB实施的数据库事务具有缩写ACID所共有的属性，用于原子性，一致性，隔离性和耐久性。</p><p>另请参见<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_acid" target="_blank" rel="noopener">ACID</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_commit" target="_blank" rel="noopener">提交</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_isolation_level" target="_blank" rel="noopener">隔离级别</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_lock" target="_blank" rel="noopener">锁定</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_rollback" target="_blank" rel="noopener">回滚</a>。</p><p>事物Id与每行相关联的内部字段。 此字段由INSERT，UPDATE和DELETE操作实际更改，以记录哪个事务已锁定该行。</p><p>另请参见<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_implicit_row_lock" target="_blank" rel="noopener">隐式行锁</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_row" target="_blank" rel="noopener">行</a>，<a href="https://dev.mysql.com/doc/refman/5.7/en/glossary.html#glos_transaction" target="_blank" rel="noopener">事务</a>。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>InnoDB的事物功能遵循ACID原则</p><p><strong>A:atomicity原子性</strong></p><p>事务是可以提交或回滚的原子工作单元。当事务对数据库进行多次更改时，在提交事务时所有更改都将成功，或者当事务回滚时所有更改都将被撤销。</p><p><strong>C:consistency一致性</strong></p><p>数据库始终保持一致状态 - 每次提交或回滚后，以及事务处理过程中。如果相关数据正在多个表中更新，查询将查看所有旧值或所有新值，而不是旧值和新值的混合。</p><p><strong>I:isolation隔离性</strong> </p><p>事物在进行中被保护（隔离）;他们不能相互干扰或看到彼此的未提交的数据。这种隔离是通过锁定机构实现的。经验丰富的用户可以调整隔离级别，减少保护，有利于提高性能和并发性，以确保交易真的不会相互干扰。</p><p><strong>D:durability持久性</strong></p><p>事务的结果是持久的：一旦提交操作成功，该事务所做的更改就可以避免电源故障，系统崩溃，竞争条件或许多非数据库应用程序容易受到的其他潜在危险。耐久性通常涉及写入磁盘存储，具有一定量的冗余以防止写入操作期间的电源故障或软件崩溃。 （在InnoDB中，双写缓冲区有助于持久耐用。）</p><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>默认情况下，MySQL运行时启用了自动提交模式。 这意味着，一旦执行更新（修改）表的语句，MySQL将更新存储在磁盘上，使其成为永久性。 更改无法回滚。</p><p>要为一系列语句隐式禁用自动提交模式，请使用START TRANSACTION语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">SELECT @A:=SUM(salary) FROM table1 WHERE type=1;</span><br><span class="line">UPDATE table2 SET summary=@A WHERE type=1;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p>下列陈述提供对事物使用的控制：</p><p>START TRANSACTION或BEGIN开始一个新的事务。</p><p>COMMIT提交当前事务，使其更改永久。</p><p>ROLLBACK回滚当前事务，取消其更改。</p><p>SET autocommit禁用或启用当前会话的默认自动提交模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit=0;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transaction </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/19/hexo/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> start </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
